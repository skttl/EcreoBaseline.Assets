'use strict'

const dest = '../EcreoBaseline.Web/'
const webpackConfig = require('./webpack.config.js')

// Minification of code is turned on if production is set to true
// Set to true by the build task or by running any task with NODE_ENV=production in the terminal
let production = process.env.NODE_ENV === 'production'

const gulp         = require('gulp')
const beep         = require('beepbeep')
const path         = require('path')
const rename       = require('gulp-rename')
const plumber      = require('gulp-plumber')
const notify       = require('gulp-notify')
const newer        = require('gulp-newer')
const sourcemaps   = require('gulp-sourcemaps')
const svgmin       = require('gulp-svgmin')
const svgstore     = require('gulp-svgstore')
const util         = require('gulp-util')
const jshint       = require('gulp-jshint')
const stylish      = require('jshint-stylish')
const webpackStream      = require('webpack-stream')
const webpack = require('webpack')
const babel        = require('gulp-babel')

// PostCss
const postcss_scss = require('postcss-scss');
const cssnano = require('cssnano');
const cssnext = require('postcss-cssnext');
const initial = require('postcss-initial');
const importer = require('postcss-import');
const reporter = require('postcss-reporter');
const precss = require('precss');
const postcss = require('gulp-postcss');
const postcss_setup = postcss([precss, importer, cssnano, cssnext, reporter], {syntax: postcss_scss});

function onError(err) {
  beep(1)
  notify.onError({
    title: 'Gulp',
    subtitle: 'Failure!',
    message: 'Error: ' + err.toString(),
    sound: 'Beep'
  })(err)

  this.emit('end')
}

/* 
 * Processes scss/umbgrid.scss and places the new file in the css folder on the destination
 */
gulp.task('umbgrid', () => 
  gulp
    .src('scss/umbgrid.scss')
    .pipe(plumber({errorHandler: onError}))
    .pipe(postcss_setup)
    .pipe(rename('umbgrid.css'))
    .pipe(sourcemaps.write('.'))
    .pipe(gulp.dest(dest + 'css'))
)

/* 
 * Processes scss/styles.scss and places the new file in the css folder on the destination
 */
gulp.task('styles', () => 
  gulp
    .src('scss/styles.scss')
    .pipe(newer({
         dest: dest + 'css/style.css',
         extra: "scss/**/*.scss"
     }))
    .pipe(plumber({errorHandler: onError}))
    
    .pipe(sourcemaps.init())
    .pipe(postcss_setup)
    .pipe(rename('styles.css'))
    .pipe(sourcemaps.write('.'))
    .pipe(gulp.dest(dest + 'css'))
)

/* 
 * This is a super task that takes care of running sass specific tasks so they can be called together
 * 
 * Tasks:
 * - styles
 * - umbgrid
 */
gulp.task('scss', ['style', 'umbgrid'], () => notify({ message: 'scss task complete' }))

/* 
 * Lints all javascript files so a uniform way of writing javascript can be kept within this project
 * - Lint rules are specified in.jshintrc
 * - scripts.min.js is excluded because it is generated by webpack and therefore doesn't need to follow linting rules
 */
gulp.task('jshint', () => 
  gulp
    .src([
      'js/**/*.js'
      ])
    .pipe(plumber({errorHandler: onError}))
    .pipe(jshint())
    .pipe(jshint.reporter(stylish))
)


/* 
 * Processes scripts.js with webpack task and outputs the final file to the destination scripts folder
 * - Makes sure it's supported in all modern browsers with es5 syntax
 */
gulp.task('scripts', ['jshint'], () =>
  gulp
    .src('js/scripts.js')
    .pipe(plumber({errorHandler: onError}))
    .pipe(sourcemaps.init())
    .pipe(webpackStream({
      plugins: [
        new webpack.optimize.DedupePlugin(),
        new webpack.optimize.OccurenceOrderPlugin(),
        new webpack.optimize.UglifyJsPlugin({ mangle: true, sourcemap: true }),
      ],
      output: {
        filename: 'scripts.js'
      }
    }))
    .pipe(babel({
      compact: true,
      comments: false,
      presets: ['es2015']
    }))
    .pipe(sourcemaps.write('.'))
    .pipe(gulp.dest(dest + 'scripts'))
    .pipe(notify({ message: 'scripts task complete' }))
)

gulp.task('svg', () =>
  gulp
    .src('svg/**/*.svg')
    .pipe(newer(dest + 'gfx/svg/svg.svg'))
    .pipe(svgmin(function (file) {
      const prefix = path.basename(file.relative, path.extname(file.relative))
      return {
        plugins: [{
          cleanupIDs: {
            prefix: prefix + '-',
            minify: true
          }
        }]
      }
    }))
    .pipe(svgstore())
    .pipe(gulp.dest(dest + 'gfx/svg'))
)

gulp.task('watch',() => {
  gulp.watch('svg/**/*.svg', ['svg'])
  gulp.watch('scss/**/*.scss', ['scss'])
  gulp.watch('js/**/*.js', ['scripts'])
})

gulp.task('default', ['svg', 'scss', 'scripts', 'watch'])

gulp.task('build', () => {
  production = true
  gulp.start('svg', 'scss', 'scripts')
})